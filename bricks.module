<?php

use Drupal\Core\Render\Element;
use Drupal\Core\TypedData\DataDefinition;


/* BRICKS STORAGE */

/**
 * Helper function for FieldItemInterface::propertyDefinitions().
 */
function _bricks_field_properties_alter(&$properties) {
  $properties['depth'] = DataDefinition::create('integer')
    ->setLabel(t('Depth'));

  $properties['options'] = DataDefinition::create('any')
    ->setLabel(t('Options'));
}

/**
 * Helper function for FieldItemInterface::schema().
 */
function _bricks_field_schema_alter(&$schema) {
  $schema['columns']['depth'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
  );

  $schema['columns']['options'] = array(
    'type' => 'blob',
    'size' => 'normal',
    'not null' => FALSE,
    'serialize' => TRUE,
  );
}


/* BRICKS FORMATTING */

/**
 * Implements hook_theme().
 */
function bricks_theme($existing, $type, $theme, $path) {
  return [
    'eck_entity__brick' => [
      'base hook' => 'eck_entity',
    ],
    'eck_entity__brick__columns' => [
      'base hook' => 'eck_entity',
    ],
  ];
}

/**
 * Prepares variables for `eck-entity.html.twig`.
 */
function bricks_preprocess_eck_entity(&$variables) {
  if (!empty($variables['entity']['field_childs']) && Element::children($variables['entity']['field_childs'])) {
    $variables['entity']['childs'] = array_intersect_key($variables['entity']['field_childs'], Element::children($variables['entity']['field_childs']));
  }
}

/**
 * Prepares variables for `paragraph.html.twig`.
 */
function bricks_preprocess_paragraph(&$variables) {
  if ($variables['content']['childs']) {
    $paragraph = $variables['elements']['#paragraph'];
    if ($field_name = _bricks_first_entity_reference_field_name($paragraph)) {
      $variables['content'][$field_name] = $variables['content']['childs'];
      unset($variables['content']['childs']);
    }
  }
}

/**
 * Helper function: returns a name of the first field of type entity_reference(_revisions).
 */
function _bricks_first_entity_reference_field_name($entity) {
  foreach ($entity->getFieldDefinitions() as $field_name => $field_definition) {
    if (!$field_definition->getFieldStorageDefinition()->isBaseField()
      && in_array($field_definition->getType(), ['entity_reference', 'entity_reference_revisions'])) {
      return $field_name;
    }
  }
}

/**
 * Prepares variables for `field.html.twig`.
 */
function bricks_preprocess_field(&$variables) {
  $element = $variables['element'];

  if ($element['#formatter'] == 'bricks_nested') {
    $variables['items'] = [
      [
        'content' => _bricks_nest_items($element, $variables['items']),
      ],
    ];
  }
}

/**
 * Helper function: converts element's items to a tree structure.
 */
function _bricks_nest_items($element, $items) {

  // Prepare items:
  $parents = array(-1);
  $prev_depth = 0;
  foreach ($items as $delta => $item) {
    $depth = $element['#items'][$delta]->depth;
    if ($depth > $prev_depth) {
      array_unshift($parents, $delta - 1);
    }
    else if ($depth < $prev_depth) {
      array_splice($parents, 0, $prev_depth - $depth);
    }
    $prev_depth = $depth;

    $items[$delta] = $items[$delta]['content'];
    $items[$delta]['#delta'] = $delta;
    $items[$delta]['#parent_delta'] = $parents[0];

    $items[$delta]['childs'] = array();
    if (!empty($element['#items'][$delta]->options['view_mode'])) {
      $items[$delta]['#view_mode'] = $element['#items'][$delta]->options['view_mode'];
    }
    if (!empty($element['#items'][$delta]->options['css_class'])) {
      $items[$delta]['#attributes']['class'][] = $element['#items'][$delta]->options['css_class'];
    }

    // Disable entity render cache, rely on field cache:
    $items[$delta]['#cache'] = array('disabled' => TRUE);
  }

  // Process items in reverse order (without recursion):
  $rdeltas = array_reverse(array_keys($items));
  foreach ($rdeltas as $delta) {
    $parent_delta = $items[$delta]['#parent_delta'];
    if ($parent_delta != -1) {
      array_unshift($items[$parent_delta]['childs'], $items[$delta]);
      unset($items[$delta]);
    }
  }

  return $items;
}


/* BRICKS EDITING */

/**
 * Implements hook_field_widget_info_alter().
 */
function bricks_field_widget_info_alter(array &$info) {
  // Let Bricks to re-use ANY Entity Reference -compatible widgets:
  foreach ($info as $widget_id => &$widget_info) {
    if (in_array('entity_reference', $widget_info['field_types'])) {
      $widget_info['field_types'][] = 'bricks';
    }
    if (in_array('entity_reference_revisions', $widget_info['field_types'])) {
      $widget_info['field_types'][] = 'bricks_revisioned';
    }
  }
}

/**
 * Prepares variables for `field-multiple-value-form.html.twig`.
 */
function bricks_preprocess_field_multiple_value_form(&$variables) {
  _bricks_preprocess_tabledrag_form($variables, 'element', 'bricks_tree_autocomplete', $variables['element']['#field_name'] . '-delta-order');
}

/**
 * Helper function for hook_preprocess_field_multiple_value_form().
 */
function _bricks_preprocess_tabledrag_form(&$variables, $element_key, $widget, $order_class, $render_options = FALSE) {
  $element = $variables[$element_key];

  if (isset($element['#widget']) && $element['#widget'] == $widget) {
    $variables['table']['#header'][0]['style'] = 'min-width: 100px'; // @TODO: Tmp hack for the proper indent width calculation.
      $variables['table']['#header'][] = ['data' => t('Depth'), 'class' => ['bricks-depth-header']];

    foreach (Element::children($element) as $key) {
      if ($key !== 'add_more') {
        $depth = $element[$key]['depth']['#value'];

        $variables['table']['#rows'][$key]['data-depth'] = $depth;
        $variables['table']['#rows'][$key]['data-bundle'] = $element[$key]['#entity']->bundle();

        $indentation = array();
        if ($depth > 0) {
          $indentation = array(
            '#theme' => 'indentation',
            '#size' => $depth,
          );
        }

        $drag_cell = &$variables['table']['#rows'][$key]['data'][0];
        $drag_cell['data'] = !empty($indentation) ? drupal_render($indentation) : '' . $drag_cell['data'];
        $drag_cell['style'] = 'width: initial'; // @TODO

        show($element[$key]['depth']);
          $variables['table']['#rows'][$key]['data'][] = \Drupal::service('renderer')->render($element[$key]['depth']);

        if ($render_options) { // @TODO: Get rid of $render_options hack.
          $element[$key]['options']['#prefix'] = $variables['table']['#rows'][$key]['data'][2]['data'];
          $variables['table']['#rows'][$key]['data'][2]['data'] = \Drupal::service('renderer')->render($element[$key]['options']);
        }
      }
    }

    $tabledrag_options = &$variables['table']['#tabledrag'];
    $tabledrag_options[0]['relationship'] = 'all';
    $tabledrag_options[] = array(
      'action' => 'depth',
      'relationship' => 'group',
      'group' => 'bricks-depth',
    );
    // Fake option to enable indentation:
    $tabledrag_options[] = array(
      'action' => 'match',
      'relationship' => 'parent',
      'group' => $order_class,
    );

    $variables['table']['#attached']['drupalSettings']['bricks']['nesting'] = bricks_get_nesting_data($element['#entity_type']);
    $variables['table']['#attached']['library'][] = 'bricks/nesting-validation';
    $variables['table']['#attached']['library'][] = 'bricks/tabledrag.relationship-all';
  }
}

/**
 * Helper function for widget's formElement().
 */
function _bricks_form_element_alter(&$element, $item, $entity_type) {
  $element['depth'] = array(
    '#type' => 'hidden', // @TODO: Other types break the correct indentations.
    '#default_value' => !empty($item->depth) ? $item->depth : 0,
    '#weight' => 10,
    '#attributes' => array(
      'class' => array('bricks-depth'),
    ),
  );
  $element['options'] = array(
    '#type' => 'container',
    '#weight' => 100,
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );
  $element['options']['view_mode'] = array(
    '#type' => 'select',
    '#options' => \Drupal::service('entity_display.repository')->getViewModeOptions($entity_type),
    '#default_value' => !empty($item->options['view_mode']) ? $item->options['view_mode'] : NULL,
  );
  $element['options']['css_class'] = array(
    '#type' => 'textfield',
    '#default_value' => !empty($item->options['css_class']) ? $item->options['css_class'] : '',
    '#size' => 10,
    '#attributes' => array(
      'placeholder' => t('CSS class(-es)'),
    ),
  );
}

/**
 * Returns the nesting settings in a format that the javascript can handle.
 */
function bricks_get_nesting_data($return_entity_type = NULL) {
  $bricks_settings = \Drupal::config('bricks.settings');
  $nesting_data = $bricks_settings->get('nesting');

  $formatted_nesting_data = [];

  foreach ($nesting_data as $entity_type => $bundles) {
    foreach ($bundles as $bundle => $bundles_that_may_be_parent) {
      foreach ($bundles_that_may_be_parent as $bundle_that_may_be_parent) {
        if ($bundle_that_may_be_parent) {
          $formatted_nesting_data[$entity_type][$bundle][] = $bundle_that_may_be_parent;
        }
      }
    }
  }

  if ($return_entity_type) {
    if (isset($formatted_nesting_data[$return_entity_type])) {
      return $formatted_nesting_data[$return_entity_type];
    }
    else {
      throw new Exception('Missing entity type data for bricks_get_nesting_data');
    }
  }

  return $formatted_nesting_data;
}